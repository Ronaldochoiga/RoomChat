{"ast":null,"code":"var _jsxFileName = \"/home/ronaldochoiga/test_node_app/react/react_app/src/MessagingPanel.js\";\nimport React, { Component, Fragment } from 'react';\nimport RoomList from './roomlist';\nimport CreateRoom from './createroom';\nimport DisplayConversation from './DisplayConversation';\nimport MessagingBox from './MessagingBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MessagingPanel extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      messages: [],\n      rooms: [{\n        id: 1,\n        name: 'Room 1'\n      }, {\n        id: 2,\n        name: 'Room 2'\n      }, {\n        id: 3,\n        name: 'Room 3'\n      }],\n      connection: null,\n      isConnectionEstablished: false // Track connection establishment\n    };\n    this.getMessage = message => {\n      const {\n        connection\n      } = this.state;\n      if (connection && connection.readyState === WebSocket.OPEN) {\n        const data = {\n          username: this.props.username,\n          message: message\n        };\n        connection.send(JSON.stringify(data));\n      } else {\n        console.error('WebSocket connection is not available.');\n      }\n    };\n    this.createRoom = roomName => {\n      const newRoom = {\n        id: this.state.rooms.length + 1,\n        name: roomName\n      };\n      this.setState({\n        rooms: [...this.state.rooms, newRoom]\n      });\n    };\n    this.joinRoom = roomId => {\n      const {\n        connection\n      } = this.state;\n      if (connection && connection.readyState === WebSocket.OPEN) {\n        const data = {\n          type: 'join',\n          roomId: roomId\n        };\n        connection.send(JSON.stringify(data));\n      } else {\n        console.error('WebSocket connection is not available.');\n      }\n    };\n  }\n  componentDidMount() {\n    const connection = new WebSocket('ws://localhost:8080/');\n    connection.onopen = () => {\n      console.log('WebSocket connection established.');\n      this.setState({\n        connection,\n        isConnectionEstablished: true\n      });\n    };\n    connection.onmessage = message => {\n      try {\n        const data = JSON.parse(message.data);\n        this.setState({\n          messages: [...this.state.messages, data]\n        });\n      } catch (error) {\n        console.error('Error parsing message:', error);\n      }\n    };\n    connection.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n  }\n  componentWillUnmount() {\n    const {\n      connection\n    } = this.state;\n    if (connection && connection.readyState === WebSocket.OPEN) {\n      connection.close();\n    }\n  }\n  render() {\n    const {\n      rooms,\n      messages,\n      connection,\n      isConnectionEstablished\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(RoomList, {\n        rooms: rooms,\n        joinRoom: this.joinRoom,\n        connection: connection,\n        isConnectionEstablished: isConnectionEstablished\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CreateRoom, {\n        createRoom: this.createRoom,\n        connection: connection,\n        isConnectionEstablished: isConnectionEstablished\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DisplayConversation, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessagingBox, {\n        getMessage: this.getMessage,\n        connection: connection,\n        isConnectionEstablished: isConnectionEstablished\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default MessagingPanel;","map":{"version":3,"names":["React","Component","Fragment","RoomList","CreateRoom","DisplayConversation","MessagingBox","jsxDEV","_jsxDEV","MessagingPanel","constructor","args","state","messages","rooms","id","name","connection","isConnectionEstablished","getMessage","message","readyState","WebSocket","OPEN","data","username","props","send","JSON","stringify","console","error","createRoom","roomName","newRoom","length","setState","joinRoom","roomId","type","componentDidMount","onopen","log","onmessage","parse","onerror","componentWillUnmount","close","render","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/ronaldochoiga/test_node_app/react/react_app/src/MessagingPanel.js"],"sourcesContent":["import React, { Component, Fragment } from 'react';\nimport RoomList from './roomlist';\nimport CreateRoom from './createroom';\nimport DisplayConversation from './DisplayConversation';\nimport MessagingBox from './MessagingBox';\n\nclass MessagingPanel extends Component {\n  state = {\n    messages: [],\n    rooms: [\n      { id: 1, name: 'Room 1' },\n      { id: 2, name: 'Room 2' },\n      { id: 3, name: 'Room 3' }\n    ],\n    connection: null,\n    isConnectionEstablished: false // Track connection establishment\n  };\n\n  componentDidMount() {\n    const connection = new WebSocket('ws://localhost:8080/');\n    connection.onopen = () => {\n      console.log('WebSocket connection established.');\n      this.setState({ connection, isConnectionEstablished: true });\n    };\n\n    connection.onmessage = (message) => {\n      try {\n        const data = JSON.parse(message.data);\n        this.setState({ messages: [...this.state.messages, data] });\n      } catch (error) {\n        console.error('Error parsing message:', error);\n      }\n    };\n\n    connection.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n  }\n\n  componentWillUnmount() {\n    const { connection } = this.state;\n    if (connection && connection.readyState === WebSocket.OPEN) {\n      connection.close();\n    }\n  }\n\n  getMessage = (message) => {\n    const { connection } = this.state;\n    if (connection && connection.readyState === WebSocket.OPEN) {\n      const data = { username: this.props.username, message: message };\n      connection.send(JSON.stringify(data));\n    } else {\n      console.error('WebSocket connection is not available.');\n    }\n  };\n\n  createRoom = (roomName) => {\n    const newRoom = { id: this.state.rooms.length + 1, name: roomName };\n    this.setState({ rooms: [...this.state.rooms, newRoom] });\n  };\n\n  joinRoom = (roomId) => {\n    const { connection } = this.state;\n    if (connection && connection.readyState === WebSocket.OPEN) {\n      const data = { type: 'join', roomId: roomId };\n      connection.send(JSON.stringify(data));\n    } else {\n      console.error('WebSocket connection is not available.');\n    }\n  };\n\n  render() {\n    const { rooms, messages, connection, isConnectionEstablished } = this.state;\n    return (\n      <Fragment>\n        <RoomList rooms={rooms} joinRoom={this.joinRoom} connection={connection} isConnectionEstablished={isConnectionEstablished} />\n        <CreateRoom createRoom={this.createRoom} connection={connection} isConnectionEstablished={isConnectionEstablished} />\n        <DisplayConversation messages={messages} />\n        <MessagingBox getMessage={this.getMessage} connection={connection} isConnectionEstablished={isConnectionEstablished} />\n      </Fragment>\n    );\n  }\n}\n\nexport default MessagingPanel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}