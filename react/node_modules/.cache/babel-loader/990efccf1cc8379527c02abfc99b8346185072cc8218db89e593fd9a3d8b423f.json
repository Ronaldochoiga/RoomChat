{"ast":null,"code":"const mysql = require('mysql');\n\n// MySQL database connection\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'nodedbAuth',\n  // Replace with your MySQL username\n  password: '@nodedbAuth',\n  // Replace with your MySQL password\n  database: 'authentication' // Replace with your MySQL database name\n});\nconnection.connect(err => {\n  if (err) {\n    console.error('Error connecting to MySQL database:', err);\n    return;\n  }\n  console.log('Connected to MySQL database');\n});\n\n// Function to save a new room to the database\nfunction saveRoom(roomName, callback) {\n  const timestamp = new Date(); // Get current timestamp\n  const room = {\n    name: roomName,\n    timestamp: timestamp\n  };\n  connection.query('INSERT INTO rooms SET ?', room, (err, result) => {\n    if (err) {\n      console.error('Error inserting room into rooms table:', err);\n      callback(err, null);\n      return;\n    }\n    console.log('Room created:', room);\n    callback(null, result);\n  });\n}\n\n// Function to retrieve all rooms from the database\nfunction getAllRooms(callback) {\n  connection.query('SELECT name FROM rooms', (err, results) => {\n    if (err) {\n      console.error('Error fetching rooms from database:', err);\n      callback(err, null);\n      return;\n    }\n    const rooms = results.map(row => row.name);\n    callback(null, rooms);\n  });\n}\nmodule.exports = {\n  saveRoom,\n  getAllRooms\n};","map":{"version":3,"names":["mysql","require","connection","createConnection","host","user","password","database","connect","err","console","error","log","saveRoom","roomName","callback","timestamp","Date","room","name","query","result","getAllRooms","results","rooms","map","row","module","exports"],"sources":["/home/ronaldochoiga/test_node_app/react/react_app/src/roomController.js"],"sourcesContent":["const mysql = require('mysql');\n\n// MySQL database connection\nconst connection = mysql.createConnection({\n    host: 'localhost',\n    user: 'nodedbAuth', // Replace with your MySQL username\n    password: '@nodedbAuth', // Replace with your MySQL password\n    database: 'authentication' // Replace with your MySQL database name\n});\n\nconnection.connect((err) => {\n    if (err) {\n        console.error('Error connecting to MySQL database:', err);\n        return;\n    }\n    console.log('Connected to MySQL database');\n});\n\n// Function to save a new room to the database\nfunction saveRoom(roomName, callback) {\n    const timestamp = new Date(); // Get current timestamp\n    const room = { name: roomName, timestamp: timestamp };\n    connection.query('INSERT INTO rooms SET ?', room, (err, result) => {\n        if (err) {\n            console.error('Error inserting room into rooms table:', err);\n            callback(err, null);\n            return;\n        }\n        console.log('Room created:', room);\n        callback(null, result);\n    });\n}\n\n// Function to retrieve all rooms from the database\nfunction getAllRooms(callback) {\n    connection.query('SELECT name FROM rooms', (err, results) => {\n        if (err) {\n            console.error('Error fetching rooms from database:', err);\n            callback(err, null);\n            return;\n        }\n        const rooms = results.map(row => row.name);\n        callback(null, rooms);\n    });\n}\n\nmodule.exports = { saveRoom, getAllRooms };\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;;AAE9B;AACA,MAAMC,UAAU,GAAGF,KAAK,CAACG,gBAAgB,CAAC;EACtCC,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,YAAY;EAAE;EACpBC,QAAQ,EAAE,aAAa;EAAE;EACzBC,QAAQ,EAAE,gBAAgB,CAAC;AAC/B,CAAC,CAAC;AAEFL,UAAU,CAACM,OAAO,CAAEC,GAAG,IAAK;EACxB,IAAIA,GAAG,EAAE;IACLC,OAAO,CAACC,KAAK,CAAC,qCAAqC,EAAEF,GAAG,CAAC;IACzD;EACJ;EACAC,OAAO,CAACE,GAAG,CAAC,6BAA6B,CAAC;AAC9C,CAAC,CAAC;;AAEF;AACA,SAASC,QAAQA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EAClC,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAAC,CAAC;EAC9B,MAAMC,IAAI,GAAG;IAAEC,IAAI,EAAEL,QAAQ;IAAEE,SAAS,EAAEA;EAAU,CAAC;EACrDd,UAAU,CAACkB,KAAK,CAAC,yBAAyB,EAAEF,IAAI,EAAE,CAACT,GAAG,EAAEY,MAAM,KAAK;IAC/D,IAAIZ,GAAG,EAAE;MACLC,OAAO,CAACC,KAAK,CAAC,wCAAwC,EAAEF,GAAG,CAAC;MAC5DM,QAAQ,CAACN,GAAG,EAAE,IAAI,CAAC;MACnB;IACJ;IACAC,OAAO,CAACE,GAAG,CAAC,eAAe,EAAEM,IAAI,CAAC;IAClCH,QAAQ,CAAC,IAAI,EAAEM,MAAM,CAAC;EAC1B,CAAC,CAAC;AACN;;AAEA;AACA,SAASC,WAAWA,CAACP,QAAQ,EAAE;EAC3Bb,UAAU,CAACkB,KAAK,CAAC,wBAAwB,EAAE,CAACX,GAAG,EAAEc,OAAO,KAAK;IACzD,IAAId,GAAG,EAAE;MACLC,OAAO,CAACC,KAAK,CAAC,qCAAqC,EAAEF,GAAG,CAAC;MACzDM,QAAQ,CAACN,GAAG,EAAE,IAAI,CAAC;MACnB;IACJ;IACA,MAAMe,KAAK,GAAGD,OAAO,CAACE,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACP,IAAI,CAAC;IAC1CJ,QAAQ,CAAC,IAAI,EAAES,KAAK,CAAC;EACzB,CAAC,CAAC;AACN;AAEAG,MAAM,CAACC,OAAO,GAAG;EAAEf,QAAQ;EAAES;AAAY,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}