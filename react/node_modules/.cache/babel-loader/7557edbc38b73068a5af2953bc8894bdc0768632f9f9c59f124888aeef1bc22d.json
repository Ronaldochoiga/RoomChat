{"ast":null,"code":"var _jsxFileName = \"/home/ronaldochoiga/test_node_app/react/react_app/src/MessagingPanel.js\";\nimport React, { Component, Fragment } from 'react';\nimport RoomList from './roomlist';\nimport CreateRoom from './createroom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MessagingPanel extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rooms: [{\n        id: 1,\n        name: 'Room 1'\n      }, {\n        id: 2,\n        name: 'Room 2'\n      }, {\n        id: 3,\n        name: 'Room 3'\n      }],\n      connection: null,\n      isConnectionEstablished: false // Track connection establishment\n    };\n    this.createRoom = roomName => {\n      const newRoom = {\n        id: this.state.rooms.length + 1,\n        name: roomName\n      };\n      this.setState({\n        rooms: [...this.state.rooms, newRoom]\n      });\n    };\n    this.joinRoom = roomId => {\n      const {\n        connection\n      } = this.state;\n      if (connection && connection.readyState === WebSocket.OPEN) {\n        const data = {\n          type: 'join',\n          roomId: roomId\n        };\n        connection.send(JSON.stringify(data));\n      } else {\n        console.error('WebSocket connection is not available.');\n      }\n    };\n  }\n  componentDidMount() {\n    const connection = new WebSocket('ws://localhost:8080/');\n    connection.onopen = () => {\n      console.log('WebSocket connection established.');\n      this.setState({\n        connection,\n        isConnectionEstablished: true\n      });\n    };\n    connection.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n  }\n  componentWillUnmount() {\n    const {\n      connection\n    } = this.state;\n    if (connection && connection.readyState === WebSocket.OPEN) {\n      connection.close();\n    }\n  }\n  render() {\n    const {\n      rooms,\n      connection,\n      isConnectionEstablished\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(RoomList, {\n        rooms: rooms,\n        joinRoom: this.joinRoom,\n        connection: connection,\n        isConnectionEstablished: isConnectionEstablished\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CreateRoom, {\n        createRoom: this.createRoom,\n        connection: connection,\n        isConnectionEstablished: isConnectionEstablished\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default MessagingPanel;","map":{"version":3,"names":["React","Component","Fragment","RoomList","CreateRoom","jsxDEV","_jsxDEV","MessagingPanel","constructor","args","state","rooms","id","name","connection","isConnectionEstablished","createRoom","roomName","newRoom","length","setState","joinRoom","roomId","readyState","WebSocket","OPEN","data","type","send","JSON","stringify","console","error","componentDidMount","onopen","log","onerror","componentWillUnmount","close","render","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/ronaldochoiga/test_node_app/react/react_app/src/MessagingPanel.js"],"sourcesContent":["import React, { Component, Fragment } from 'react';\nimport RoomList from './roomlist';\nimport CreateRoom from './createroom';\n\nclass MessagingPanel extends Component {\n  state = {\n    rooms: [\n      { id: 1, name: 'Room 1' },\n      { id: 2, name: 'Room 2' },\n      { id: 3, name: 'Room 3' }\n    ],\n    connection: null,\n    isConnectionEstablished: false // Track connection establishment\n  };\n\n  componentDidMount() {\n    const connection = new WebSocket('ws://localhost:8080/');\n    connection.onopen = () => {\n      console.log('WebSocket connection established.');\n      this.setState({ connection, isConnectionEstablished: true });\n    };\n\n    connection.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n  }\n\n  componentWillUnmount() {\n    const { connection } = this.state;\n    if (connection && connection.readyState === WebSocket.OPEN) {\n      connection.close();\n    }\n  }\n\n  createRoom = (roomName) => {\n    const newRoom = { id: this.state.rooms.length + 1, name: roomName };\n    this.setState({ rooms: [...this.state.rooms, newRoom] });\n  };\n\n  joinRoom = (roomId) => {\n    const { connection } = this.state;\n    if (connection && connection.readyState === WebSocket.OPEN) {\n      const data = { type: 'join', roomId: roomId };\n      connection.send(JSON.stringify(data));\n    } else {\n      console.error('WebSocket connection is not available.');\n    }\n  };\n\n  render() {\n    const { rooms, connection, isConnectionEstablished } = this.state;\n    return (\n      <Fragment>\n        <RoomList rooms={rooms} joinRoom={this.joinRoom} connection={connection} isConnectionEstablished={isConnectionEstablished} />\n        <CreateRoom createRoom={this.createRoom} connection={connection} isConnectionEstablished={isConnectionEstablished} />\n      </Fragment>\n    );\n  }\n}\n\nexport default MessagingPanel;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,cAAc,SAASN,SAAS,CAAC;EAAAO,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KACrCC,KAAK,GAAG;MACNC,KAAK,EAAE,CACL;QAAEC,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAS,CAAC,EACzB;QAAED,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAS,CAAC,EACzB;QAAED,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAS,CAAC,CAC1B;MACDC,UAAU,EAAE,IAAI;MAChBC,uBAAuB,EAAE,KAAK,CAAC;IACjC,CAAC;IAAA,KAqBDC,UAAU,GAAIC,QAAQ,IAAK;MACzB,MAAMC,OAAO,GAAG;QAAEN,EAAE,EAAE,IAAI,CAACF,KAAK,CAACC,KAAK,CAACQ,MAAM,GAAG,CAAC;QAAEN,IAAI,EAAEI;MAAS,CAAC;MACnE,IAAI,CAACG,QAAQ,CAAC;QAAET,KAAK,EAAE,CAAC,GAAG,IAAI,CAACD,KAAK,CAACC,KAAK,EAAEO,OAAO;MAAE,CAAC,CAAC;IAC1D,CAAC;IAAA,KAEDG,QAAQ,GAAIC,MAAM,IAAK;MACrB,MAAM;QAAER;MAAW,CAAC,GAAG,IAAI,CAACJ,KAAK;MACjC,IAAII,UAAU,IAAIA,UAAU,CAACS,UAAU,KAAKC,SAAS,CAACC,IAAI,EAAE;QAC1D,MAAMC,IAAI,GAAG;UAAEC,IAAI,EAAE,MAAM;UAAEL,MAAM,EAAEA;QAAO,CAAC;QAC7CR,UAAU,CAACc,IAAI,CAACC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;MACvC,CAAC,MAAM;QACLK,OAAO,CAACC,KAAK,CAAC,wCAAwC,CAAC;MACzD;IACF,CAAC;EAAA;EAhCDC,iBAAiBA,CAAA,EAAG;IAClB,MAAMnB,UAAU,GAAG,IAAIU,SAAS,CAAC,sBAAsB,CAAC;IACxDV,UAAU,CAACoB,MAAM,GAAG,MAAM;MACxBH,OAAO,CAACI,GAAG,CAAC,mCAAmC,CAAC;MAChD,IAAI,CAACf,QAAQ,CAAC;QAAEN,UAAU;QAAEC,uBAAuB,EAAE;MAAK,CAAC,CAAC;IAC9D,CAAC;IAEDD,UAAU,CAACsB,OAAO,GAAIJ,KAAK,IAAK;MAC9BD,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC1C,CAAC;EACH;EAEAK,oBAAoBA,CAAA,EAAG;IACrB,MAAM;MAAEvB;IAAW,CAAC,GAAG,IAAI,CAACJ,KAAK;IACjC,IAAII,UAAU,IAAIA,UAAU,CAACS,UAAU,KAAKC,SAAS,CAACC,IAAI,EAAE;MAC1DX,UAAU,CAACwB,KAAK,CAAC,CAAC;IACpB;EACF;EAiBAC,MAAMA,CAAA,EAAG;IACP,MAAM;MAAE5B,KAAK;MAAEG,UAAU;MAAEC;IAAwB,CAAC,GAAG,IAAI,CAACL,KAAK;IACjE,oBACEJ,OAAA,CAACJ,QAAQ;MAAAsC,QAAA,gBACPlC,OAAA,CAACH,QAAQ;QAACQ,KAAK,EAAEA,KAAM;QAACU,QAAQ,EAAE,IAAI,CAACA,QAAS;QAACP,UAAU,EAAEA,UAAW;QAACC,uBAAuB,EAAEA;MAAwB;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC7HtC,OAAA,CAACF,UAAU;QAACY,UAAU,EAAE,IAAI,CAACA,UAAW;QAACF,UAAU,EAAEA,UAAW;QAACC,uBAAuB,EAAEA;MAAwB;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7G,CAAC;EAEf;AACF;AAEA,eAAerC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}