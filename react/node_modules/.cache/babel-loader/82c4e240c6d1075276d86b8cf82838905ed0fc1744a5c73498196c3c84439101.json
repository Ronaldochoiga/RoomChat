{"ast":null,"code":"var _jsxFileName = \"/home/ronaldochoiga/test_node_app/react/react_app/src/MessagingPanel.js\";\nimport React, { Component, Fragment } from 'react';\nimport RoomList from './roomlist';\nimport CreateRoom from './createroom';\nimport DisplayConversation from './DisplayConversation';\nimport MessagingBox from './MessagingBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MessagingPanel extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      messages: [],\n      rooms: [{\n        id: 1,\n        name: 'Room 1'\n      }, {\n        id: 2,\n        name: 'Room 2'\n      }, {\n        id: 3,\n        name: 'Room 3'\n      }],\n      connection: new WebSocket('ws://localhost:8080/') // Establish WebSocket connection\n    };\n    this.getMessage = message => {\n      const data = {\n        username: this.props.username,\n        message: message\n      };\n      this.state.connection.send(JSON.stringify(data));\n    };\n    this.createRoom = roomName => {\n      const newRoom = {\n        id: this.state.rooms.length + 1,\n        name: roomName\n      };\n      this.setState({\n        rooms: [...this.state.rooms, newRoom]\n      });\n    };\n    this.joinRoom = roomId => {\n      const data = {\n        type: 'join',\n        roomId: roomId\n      };\n      this.state.connection.send(JSON.stringify(data));\n    };\n  }\n  componentDidMount() {\n    const {\n      connection\n    } = this.state;\n    connection.onopen = () => {\n      console.log('WebSocket connection established.');\n    };\n    connection.onmessage = message => {\n      try {\n        const data = JSON.parse(message.data);\n        this.setState({\n          messages: [...this.state.messages, data]\n        });\n      } catch (error) {\n        console.error('Error parsing message:', error);\n      }\n    };\n    connection.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n  }\n  componentWillUnmount() {\n    const {\n      connection\n    } = this.state;\n    connection.close();\n  }\n  render() {\n    const {\n      rooms,\n      messages,\n      connection\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(RoomList, {\n        rooms: rooms,\n        joinRoom: this.joinRoom,\n        connection: connection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CreateRoom, {\n        createRoom: this.createRoom,\n        connection: connection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DisplayConversation, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessagingBox, {\n        getMessage: this.getMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default MessagingPanel;","map":{"version":3,"names":["React","Component","Fragment","RoomList","CreateRoom","DisplayConversation","MessagingBox","jsxDEV","_jsxDEV","MessagingPanel","constructor","args","state","messages","rooms","id","name","connection","WebSocket","getMessage","message","data","username","props","send","JSON","stringify","createRoom","roomName","newRoom","length","setState","joinRoom","roomId","type","componentDidMount","onopen","console","log","onmessage","parse","error","onerror","componentWillUnmount","close","render","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/ronaldochoiga/test_node_app/react/react_app/src/MessagingPanel.js"],"sourcesContent":["import React, { Component, Fragment } from 'react';\nimport RoomList from './roomlist';\nimport CreateRoom from './createroom';\nimport DisplayConversation from './DisplayConversation';\nimport MessagingBox from './MessagingBox';\n\nclass MessagingPanel extends Component {\n  state = {\n    messages: [],\n    rooms: [\n      { id: 1, name: 'Room 1' },\n      { id: 2, name: 'Room 2' },\n      { id: 3, name: 'Room 3' }\n    ],\n    connection: new WebSocket('ws://localhost:8080/') // Establish WebSocket connection\n  };\n\n  componentDidMount() {\n    const { connection } = this.state;\n    connection.onopen = () => {\n      console.log('WebSocket connection established.');\n    };\n\n    connection.onmessage = (message) => {\n      try {\n        const data = JSON.parse(message.data);\n        this.setState({ messages: [...this.state.messages, data] });\n      } catch (error) {\n        console.error('Error parsing message:', error);\n      }\n    };\n\n    connection.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n  }\n\n  componentWillUnmount() {\n    const { connection } = this.state;\n    connection.close();\n  }\n\n  getMessage = (message) => {\n    const data = { username: this.props.username, message: message };\n    this.state.connection.send(JSON.stringify(data));\n  };\n\n  createRoom = (roomName) => {\n    const newRoom = { id: this.state.rooms.length + 1, name: roomName };\n    this.setState({ rooms: [...this.state.rooms, newRoom] });\n  };\n\n  joinRoom = (roomId) => {\n    const data = { type: 'join', roomId: roomId };\n    this.state.connection.send(JSON.stringify(data));\n  };\n\n  render() {\n    const { rooms, messages, connection } = this.state;\n    return (\n      <Fragment>\n        <RoomList rooms={rooms} joinRoom={this.joinRoom} connection={connection} />\n        <CreateRoom createRoom={this.createRoom} connection={connection} />\n        <DisplayConversation messages={messages} />\n        <MessagingBox getMessage={this.getMessage} />\n      </Fragment>\n    );\n  }\n}\n\nexport default MessagingPanel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}