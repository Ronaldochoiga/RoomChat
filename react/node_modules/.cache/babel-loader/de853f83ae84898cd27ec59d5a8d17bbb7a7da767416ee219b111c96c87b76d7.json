{"ast":null,"code":"var _jsxFileName = \"/home/ronaldochoiga/test_node_app/react/react_app/src/MessagingPanel.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport RoomList from './RoomList';\nimport CreateRoom from './CreateRoom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MessagingPanel = ({\n  username\n}) => {\n  _s();\n  const [rooms, setRooms] = useState([]);\n  const [connection, setConnection] = useState(null);\n  const [isConnectionEstablished, setIsConnectionEstablished] = useState(false);\n  useEffect(() => {\n    const newConnection = new WebSocket('ws://localhost:8080/');\n    newConnection.onopen = () => {\n      console.log('WebSocket connection established.');\n      setConnection(newConnection);\n      setIsConnectionEstablished(true);\n    };\n    newConnection.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n    return () => {\n      // Clean up WebSocket connection when component unmounts\n      if (newConnection && newConnection.readyState === WebSocket.OPEN) {\n        newConnection.close();\n      }\n    };\n  }, []);\n  const createRoom = roomName => {\n    const newRoom = {\n      id: rooms.length + 1,\n      name: roomName\n    };\n    setRooms([...rooms, newRoom]);\n  };\n  const joinRoom = roomId => {\n    if (connection && connection.readyState === WebSocket.OPEN) {\n      const data = {\n        type: 'join',\n        roomId: roomId\n      };\n      connection.send(JSON.stringify(data));\n    } else {\n      console.error('WebSocket connection is not available.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(RoomList, {\n      rooms: rooms,\n      joinRoom: joinRoom,\n      connection: connection,\n      isConnectionEstablished: isConnectionEstablished\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CreateRoom, {\n      createRoom: createRoom,\n      connection: connection,\n      isConnectionEstablished: isConnectionEstablished\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(MessagingPanel, \"wdcb/XxrVt39C0vQECvuO9CaXZg=\");\n_c = MessagingPanel;\nexport default MessagingPanel;\nvar _c;\n$RefreshReg$(_c, \"MessagingPanel\");","map":{"version":3,"names":["React","useState","useEffect","RoomList","CreateRoom","jsxDEV","_jsxDEV","Fragment","_Fragment","MessagingPanel","username","_s","rooms","setRooms","connection","setConnection","isConnectionEstablished","setIsConnectionEstablished","newConnection","WebSocket","onopen","console","log","onerror","error","readyState","OPEN","close","createRoom","roomName","newRoom","id","length","name","joinRoom","roomId","data","type","send","JSON","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ronaldochoiga/test_node_app/react/react_app/src/MessagingPanel.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport RoomList from './RoomList';\nimport CreateRoom from './CreateRoom';\n\nconst MessagingPanel = ({ username }) => {\n  const [rooms, setRooms] = useState([]);\n  const [connection, setConnection] = useState(null);\n  const [isConnectionEstablished, setIsConnectionEstablished] = useState(false);\n\n  useEffect(() => {\n    const newConnection = new WebSocket('ws://localhost:8080/');\n    newConnection.onopen = () => {\n      console.log('WebSocket connection established.');\n      setConnection(newConnection);\n      setIsConnectionEstablished(true);\n    };\n\n    newConnection.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n\n    return () => {\n      // Clean up WebSocket connection when component unmounts\n      if (newConnection && newConnection.readyState === WebSocket.OPEN) {\n        newConnection.close();\n      }\n    };\n  }, []);\n\n  const createRoom = (roomName) => {\n    const newRoom = { id: rooms.length + 1, name: roomName };\n    setRooms([...rooms, newRoom]);\n  };\n\n  const joinRoom = (roomId) => {\n    if (connection && connection.readyState === WebSocket.OPEN) {\n      const data = { type: 'join', roomId: roomId };\n      connection.send(JSON.stringify(data));\n    } else {\n      console.error('WebSocket connection is not available.');\n    }\n  };\n\n  return (\n    <>\n      <RoomList rooms={rooms} joinRoom={joinRoom} connection={connection} isConnectionEstablished={isConnectionEstablished} />\n      <CreateRoom createRoom={createRoom} connection={connection} isConnectionEstablished={isConnectionEstablished} />\n    </>\n  );\n};\n\nexport default MessagingPanel;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtC,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACe,uBAAuB,EAAEC,0BAA0B,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAE7EC,SAAS,CAAC,MAAM;IACd,MAAMgB,aAAa,GAAG,IAAIC,SAAS,CAAC,sBAAsB,CAAC;IAC3DD,aAAa,CAACE,MAAM,GAAG,MAAM;MAC3BC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChDP,aAAa,CAACG,aAAa,CAAC;MAC5BD,0BAA0B,CAAC,IAAI,CAAC;IAClC,CAAC;IAEDC,aAAa,CAACK,OAAO,GAAIC,KAAK,IAAK;MACjCH,OAAO,CAACG,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC1C,CAAC;IAED,OAAO,MAAM;MACX;MACA,IAAIN,aAAa,IAAIA,aAAa,CAACO,UAAU,KAAKN,SAAS,CAACO,IAAI,EAAE;QAChER,aAAa,CAACS,KAAK,CAAC,CAAC;MACvB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,UAAU,GAAIC,QAAQ,IAAK;IAC/B,MAAMC,OAAO,GAAG;MAAEC,EAAE,EAAEnB,KAAK,CAACoB,MAAM,GAAG,CAAC;MAAEC,IAAI,EAAEJ;IAAS,CAAC;IACxDhB,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEkB,OAAO,CAAC,CAAC;EAC/B,CAAC;EAED,MAAMI,QAAQ,GAAIC,MAAM,IAAK;IAC3B,IAAIrB,UAAU,IAAIA,UAAU,CAACW,UAAU,KAAKN,SAAS,CAACO,IAAI,EAAE;MAC1D,MAAMU,IAAI,GAAG;QAAEC,IAAI,EAAE,MAAM;QAAEF,MAAM,EAAEA;MAAO,CAAC;MAC7CrB,UAAU,CAACwB,IAAI,CAACC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;IACvC,CAAC,MAAM;MACLf,OAAO,CAACG,KAAK,CAAC,wCAAwC,CAAC;IACzD;EACF,CAAC;EAED,oBACElB,OAAA,CAAAE,SAAA;IAAAiC,QAAA,gBACEnC,OAAA,CAACH,QAAQ;MAACS,KAAK,EAAEA,KAAM;MAACsB,QAAQ,EAAEA,QAAS;MAACpB,UAAU,EAAEA,UAAW;MAACE,uBAAuB,EAAEA;IAAwB;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACxHvC,OAAA,CAACF,UAAU;MAACwB,UAAU,EAAEA,UAAW;MAACd,UAAU,EAAEA,UAAW;MAACE,uBAAuB,EAAEA;IAAwB;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAChH,CAAC;AAEP,CAAC;AAAClC,EAAA,CA7CIF,cAAc;AAAAqC,EAAA,GAAdrC,cAAc;AA+CpB,eAAeA,cAAc;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}